name: Minecraft Docker Image CI

on:
  workflow_dispatch:
    inputs:
      PROJECT_ID:
        description: 'Modpack slug/ID'
        required: true
        type: string
      GAME_VERSION:
        description: 'Game version (e.g. 1.21)'
        required: true
        type: string
      LOADER:
        description: 'Loader (fabric|forge|neoforge|quilt)'
        required: true
        default: 'fabric'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.inputs.PROJECT_ID }}
    steps:
      # 解析整合包元数据 & 推断 Java 版本
      - name: Resolve metadata
        id: meta
        run: |
          # 查询 Modrinth 最新发布版
          resp=$(curl -s "https://api.modrinth.com/v2/project/${{ inputs.PROJECT_ID }}/version" | \
            jq -r --arg L "${{ inputs.LOADER }}" --arg G "${{ inputs.GAME_VERSION }}" \
            'map(select(.loaders[]==$L and (.game_versions[]==$G) and .version_type=="release")) | sort_by(.date_published) | last')
          version_id=$(echo "$resp" | jq -r '.id')
          mc_ver=$(echo "$resp" | jq -r '.game_versions[0]')
          # 推断 Java 版本
          case "$mc_ver" in
            1.20.5*|1.20.6*|1.21*) jvm="21" ;;
            1.19.3*|1.19.4*|1.20*)  jvm="17" ;;
            1.18*)                  jvm="17" ;;
            1.17*)                  jvm="16" ;;
            *)                      jvm="8"  ;;
          esac
          echo "version_id=$version_id" >> $GITHUB_OUTPUT
          echo "java=$jvm"              >> $GITHUB_OUTPUT

      # 初始化公共工件
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3

      # 使用 Java 21
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      # 下载并制作 server.jar
      - name: Download & Extract Mrpack
        run: |
          # 获取 mrpack
          curl -L \
            "https://cdn.modrinth.com/data/${{ inputs.PROJECT_ID }}/versions/${{ steps.meta.outputs.version_id }}/download" \
            -o local.mrpack
          # 获取 mrpack4server 解压器
          curl -L -o mrpack4server.jar \
            "https://mrpack4server.pb4.eu/download/${{ inputs.PROJECT_ID }}/${{ steps.meta.outputs.version_id }}/jvm${{ steps.meta.outputs.java }}/server.jar"
          # 用 mrpack4server 的 --extract-only 模式展开整合包
          java -jar mrpack4server.jar --nogui

      # 构建并推送多架构镜像
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            JAVA_VERSION=${{ steps.meta.outputs.java }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,compression=zstd,compression-level=9