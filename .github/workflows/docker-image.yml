name: Minecraft Modpack Server CI

on:
  workflow_dispatch:
    inputs:
      PROJECT_ID:
        description: 'CurseForge项目ID'
        required: true
        type: string
      SERVER_VERSION:
        description: 'Minecraft服务端版本'
        required: true
        type: string
      MOD_LOADERS:
        description: '模组加载器 (fabric/forge)'
        required: true
        default: 'fabric'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      JAR_CATALOG: public
      CURSEFORGE_API: https://www.curseforge.com/api/v1

    steps:
      - uses: actions/checkout@v4

      # 设置多架构构建环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 验证Modpack是否存在
      - name: Validate Modpack
        run: |
          RESPONSE=$(curl -s "${{ env.CURSEFORGE_API }}/mods/${{ inputs.PROJECT_ID }}/files")
          if [ $(echo "$RESPONSE" | jq -r '.data.id') == null ]; then
            echo "::error::Invalid Project ID"
            exit 1
          fi

      - name: init Env
        run: |
          mkdir -p ${{ env.JAR_CATALOG }}
          sudo apt-get -qq -y update

      # 下载并解析manifest.json
      - name: Download and Parse Manifest
        id: manifest
        run: |
          # 初始化翻页参数
          PAGE_INDEX=0
          MAX_PAGES=10
          FOUND_FILE=""
          # 翻页查找匹配版本的文件
          while [[ $PAGE_INDEX -lt $MAX_PAGES ]]; do
            # 获取当前页文件列表（按日期降序）
            FILES_JSON=$(curl -s "${{ env.CURSEFORGE_API }}/mods/${{ inputs.PROJECT_ID }}/files?index=$((PAGE_INDEX*50))&pageSize=50&sort=fileDate&sortDescending=true")
            # 检查匹配版本
            FOUND_FILE=$(echo "$FILES_JSON" | jq -r --arg ver "${{ inputs.SERVER_VERSION }}" '.data[] | select(.gameVersions[] | contains($ver)) | {id, fileName}' | jq -s 'first(.[])')
            # 找到匹配则跳出循环
            if [[ $(echo "$FOUND_FILE" | jq -r '.id') != "null" ]] && [[ -n "$FOUND_FILE" ]]; then
              break
            fi
            ((PAGE_INDEX++))
            echo "正在翻页查找匹配版本 (第 $PAGE_INDEX 页)..."
          done
          # 检查是否找到匹配文件
          if [[ -z "$FOUND_FILE" ]] || [[ $(echo "$FOUND_FILE" | jq -r '.id') == "null" ]]; then
            echo "::error::找不到匹配版本 ${{ inputs.SERVER_VERSION }} 的modpack文件"
            exit 1
          fi
          # 提取文件信息
          FILE_ID=$(echo "$FOUND_FILE" | jq -r '.id')
          FILE_NAME=$(echo "$FOUND_FILE" | jq -r '.fileName')
          # 下载modpack
          curl -fL -o modpack.zip "https://edge.forgecdn.net/files/${FILE_ID:0:4}/${FILE_ID:4:2}/$FILE_NAME"
          # 解压并解析manifest
          unzip -j modpack.zip manifest.json -d .
          MANIFEST_JSON=$(jq -c . manifest.json)
          echo "MANIFEST_JSON=$MANIFEST_JSON" >> $GITHUB_ENV
          echo "MINECRAFT_VERSION=$(jq -r '.minecraft.version' <<< "$MANIFEST_JSON")" >> $GITHUB_ENV
          echo "FILE_IDS=$(jq -r '[.files[] | .projectId, .fileId] | join(":")' <<< "$MANIFEST_JSON")" >> $GITHUB_ENV
          echo "MOD_LOADER_VERSION=$(jq -r '.minecraft.modLoaders[0].id' <<< "$MANIFEST_JSON" | cut -d- -f2)" >> $GITHUB_ENV
          echo "成功下载版本 ${{ inputs.SERVER_VERSION }} 的modpack文件：$FILE_NAME"

      # 规范化镜像名称
      - name: Normalize Image Name
        run: |
          MODPACK_NAME=$(echo "$MANIFEST_JSON" | jq -r '.name')
          # 转换规则：小写化、空格转横线、移除特殊字符 
          NORMALIZED_NAME=$(echo "$MODPACK_NAME" | 
            tr '[:upper:]' '[:lower:]' |
            tr ' ' '-' |
            sed 's/[^a-z0-9_-]//g')
          MODPACK_VERSION=$(echo "$MANIFEST_JSON" | jq -r '.version')
          echo "NORMALIZED_NAME=$NORMALIZED_NAME" >> $GITHUB_ENV
          echo "MODPACK_VERSION=$MODPACK_VERSION" >> $GITHUB_ENV

      # 安装模组加载器
      - name: Install Mod Loader
        run: |
          mkdir -p /temp/cache/
          case "${{ inputs.MOD_LOADERS }}" in
            fabric)
              # 安装Fabric核心 
              FABRIC_META="https://meta.fabricmc.net/v2/versions"
              LOADER_VER=$(curl -s $FABRIC_META/loader | jq -r '.[0].version')
              INSTALLER_VER=$(curl -s $FABRIC_META/installer | jq -r '.[0].version')
              curl -fSL -o server-core.jar \
                "https://meta.fabricmc.net/v2/versions/loader/${{ env.MINECRAFT_VERSION }}/$LOADER_VER/$INSTALLER_VER/server/jar"
              # 获取Fabric API
              FABRIC_API_URL=$(curl -s "https://api.github.com/repos/FabricMC/fabric/releases" | 
                jq -r --arg ver "${{ env.MINECRAFT_VERSION }}" '.[] | select(.tag_name | contains($ver)) | .assets[0].browser_download_url')
              curl -fSL -o ${{ env.JAR_CATALOG }}/fabric-api.jar "$FABRIC_API_URL"
              # 初始化服务端
              java -jar server-core.jar --nogui --universe /temp/cache/
              ;;
            forge)
              # 安装Forge核心 
              PROMOTION_FILE="https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json"
              FORGE_VERSION=$(curl -s $PROMOTION_FILE | jq -r --arg VER "${{ env.MINECRAFT_VERSION }}" '.promos[$VER + "-latest"]')
              if [ "$FORGE_VERSION" = "null" ]; then
                echo "::error::No Forge version available for ${{ env.MINECRAFT_VERSION }}"
                exit 1
              fi
              # 下载安装器
              curl -fSL -o forge-installer.jar \
                "https://maven.minecraftforge.net/net/minecraftforge/forge/${{ env.MINECRAFT_VERSION }}-$FORGE_VERSION/forge-${{ env.MINECRAFT_VERSION }}-$FORGE_VERSION-installer.jar"
              # 初始化服务端
              java -jar forge-installer.jar --installServer
              mv forge-${{ env.MINECRAFT_VERSION }}-$FORGE_VERSION-universal.jar server-core.jar
              rm -rf server.properties eula.txt README.txt user_jvm_args.txt forge-installer.jar *.log run.bat run.sh
              java -jar server-core.jar --nogui --universe /temp/cache/
              ;;
            *)
              echo "::error::Unsupported loader: ${{ inputs.MOD_LOADERS }}"
              exit 1
              ;;
          esac

      # 并发下载所有模组文件（动态并行度）
      - name: Download Mods in Parallel
        run: |
          mkdir -p mods
          # 准备下载列表 
          echo "${{ env.FILE_IDS }}" | tr ' ' '\n' | while IFS=":" read -r PID FID; do
            MOD_URL=$(curl -s "${{ env.CURSEFORGE_API }}/mods/$PID/files/$FID" | 
              jq -r '.data.downloadUrl')
            echo "$MOD_URL mods/$(basename "$MOD_URL")"
          done > download-list.txt
          cat download-list.txt | parallel --bar -j$(nproc) curl -L -o ${{ env.JAR_CATALOG }}/{2} {1}

      # 整理服务端文件
      - name: Prepare Server Files
        run: |
          # 清理旧文件并解压新内容
          rm -rf server-files
          unzip -o modpack.zip -d server-files
          # 优先级：server-overrides > overrides 
          if [ -d "server-files/server-overrides" ]; then
            cp -rf server-files/server-overrides/* .
          elif [ -d "server-files/overrides" ]; then
            cp -rf server-files/overrides/* .
          fi

      # 构建并推送多架构镜像
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.NORMALIZED_NAME }}:${{ env.MODPACK_VERSION }}