name: Minecraft Docker Image CI

on:
  workflow_dispatch:
    inputs:
      PROJECT_ID:
        description: 'Modpack slug/ID'
        required: true
        type: string
      GAME_VERSION:
        description: 'Game version (e.g. 1.21)'
        required: true
        type: string
      LOADER:
        description: 'Loader (fabric|forge|neoforge|quilt)'
        required: true
        default: 'fabric'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      CI: true
      TERM: dumb
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.inputs.PROJECT_ID }}

    steps:
      - uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker setup
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # 解析 整合包元数据
      - name: Resolve metadata
        id: meta
        run: |
          resp=$(curl -s "https://api.modrinth.com/v2/project/${{ inputs.PROJECT_ID }}/version" | jq -r --arg L "${{ inputs.LOADER }}" --arg G "${{ inputs.GAME_VERSION }}" 'map(select(.loaders[]==$L and .version_type=="release")) | map(select(.game_versions[] | contains($G))) | sort_by(.date_published) | last')
          file_url=$(echo "$resp" | jq -r '.files[0].url // empty')
          echo "java=$(echo "$resp" | jq -r 'if (.game_versions[0] // "" | startswith("1.20.5") or startswith("1.20.6") or startswith("1.21")) then "21" else "17" end')" >> $GITHUB_OUTPUT
          echo "pack_ver=$(echo "$resp" | jq -r '.version_number // "unknown"')" >> $GITHUB_OUTPUT
          echo "file_url=$file_url" >> $GITHUB_OUTPUT

      # 下载 整合包文件
      - name: Download modpack
        run: |
          echo "Downloading ModPack: ${{ steps.meta.outputs.file_url }}"  
          curl -L "${{ steps.meta.outputs.file_url }}" -o pack.mrpack

      # 获取 ServerPackCreator 工具
      - name: Download ServerPackCreator
        run: |
          LATEST_VERSION=$(curl -fsS https://api.github.com/repos/Griefed/ServerPackCreator/releases/latest | jq -r '.tag_name')       
          DOWNLOAD_URL="https://github.com/Griefed/ServerPackCreator/releases/download/$LATEST_VERSION/serverpackcreator-$LATEST_VERSION.jar"        
          echo "Downloading ServerPackCreator: $DOWNLOAD_URL"
          curl -fL -o spc.jar "$DOWNLOAD_URL"

      # 生成 服务端包
      - name: Generate server pack
        env:
          SPC_SKIP_CONFIG_CHECK: true
        run: |
          # 解压整合包
          mkdir -p modpack_extracted
          unzip -q pack.mrpack -d modpack_extracted
          chmod -R a+rX modpack_extracted
          echo "Modpack contents:"
          ls -lah modpack_extracted
          # 使用自动模式运行
          java -jar spc.jar -feelinglucky modpack_extracted --destination .

      # 构建并推送多架构镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          build-args: |
            JAVA_VERSION=${{ steps.meta.outputs.java }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.pack_ver }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
