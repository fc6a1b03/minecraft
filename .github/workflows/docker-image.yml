name: Minecraft Docker Image CI

on:
  workflow_dispatch:
    inputs:
      PROJECT_ID:
        description: 'Modpack slug/ID'
        required: true
        type: string
      GAME_VERSION:
        description: 'Game version (e.g. 1.21)'
        required: true
        type: string
      LOADER:
        description: 'Loader (fabric|forge|neoforge|quilt)'
        required: true
        default: 'fabric'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      CI: true
      TERM: dumb
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.inputs.PROJECT_ID }}

    steps:
      - uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker setup
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # 解析 整合包元数据  
      - name: Resolve metadata    
        id: meta
        run: |
          resp=$(curl -s "https://api.modrinth.com/v2/project/better-mc-fabric-bmc3/version" | jq -r --arg L "fabric" --arg G "1.21.1" 'map(select(.loaders[]==$L and .version_type=="release")) | map(select(.game_versions[] | contains($G))) | sort_by(.date_published) | last')
          echo "Project ID: $(echo "$resp" | jq -r '.project_id // ""')"
          echo "Version ID: $(echo "$resp" | jq -r '.id // ""')"
          echo "java=$(echo "$resp" | jq -r 'if (.game_versions[0] // "" | startswith("1.20.5") or startswith("1.20.6") or startswith("1.21")) then "21" else "17" end')" >> $GITHUB_OUTPUT    
          echo "pack_ver=$(echo "$resp" | jq -r '.version_number // "unknown"')" >> $GITHUB_OUTPUT
          echo "version_id=$(echo "$resp" | jq -r '.id // ""')" >> $GITHUB_OUTPUT
          echo "project_id=$(echo "$resp" | jq -r '.project_id // ""')" >> $GITHUB_OUTPUT
  
      # 下载 整合包文件  
      - name: Download modpack  
        run: |    
          DOWNLOAD_URL="https://cdn.modrinth.com/data/${{ steps.meta.outputs.project_id }}/versions/${{ steps.meta.outputs.version_id }}/download"  
          echo "Downloading ModPack: $DOWNLOAD_URL"  
          curl -L "$DOWNLOAD_URL" -o pack.mrpack

      # 获取 ServerPackCreator 工具
      - name: Download ServerPackCreator
        run: |
            LATEST_VERSION=$(curl -fsS https://api.github.com/repos/Griefed/ServerPackCreator/releases/latest | jq -r '.tag_name')       
            DOWNLOAD_URL="https://github.com/Griefed/ServerPackCreator/releases/download/$LATEST_VERSION/serverpackcreator-$LATEST_VERSION.jar"        
            echo "Downloading ServerPackCreator: $DOWNLOAD_URL"
            curl -fL -o spc.jar "$DOWNLOAD_URL"

      # 生成 服务端包
      - name: Generate server pack
        run: |
          mkdir -p modpack_extracted
          unzip -q pack.mrpack -d modpack_extracted
          java -jar spc.jar -feelinglucky modpack_extracted --destination .

      # 构建并推送多架构镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          build-args: |
            JAVA_VERSION=${{ steps.meta.outputs.java }}
          标签: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.LOADER }}-${{ steps.meta.outputs.pack_ver }}-${{ inputs.GAME_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
