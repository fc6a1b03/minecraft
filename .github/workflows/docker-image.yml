name: Minecraft Docker Image CI

# 触发配置
on:
  schedule:
    - cron: '0 0 */3 * *'
  workflow_dispatch:
    inputs:
      LATEST_VERSION:
        description: '要构建的Minecraft版本；只打版本镜像且会跳过`检查版本是否更新`和`记录最后构建版本`步骤'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }} 

    # Step 1: 设置Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 2: 为多平台构建安装QEMU
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Step 3: 设置仓库
    - name: Set registry environment variable
      run: echo "REGISTRY=ghcr.io" >> $GITHUB_ENV
    
    # Step 4: 登录Docker Hub
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: 登录本仓库
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      id: docker-login
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 5: 获取最新的Purpur版本信息
    - name: Fetch Purpur version info
      id: version_info
      env:
        PURPUR_API_BASE: "https://api.purpurmc.org/v2/purpur"
      run: |
        # 确定Minecraft版本
        if [ -n "${{ github.event.inputs.LATEST_VERSION }}" ]; then
          LATEST_VERSION="${{ github.event.inputs.LATEST_VERSION }}"
        else
          # 获取最新的Minecraft版本（通过metadata.current字段）
          LATEST_VERSION=$(curl -s $PURPUR_API_BASE | jq -r '.metadata.current')
        fi
        # 生成下载URL
        SERVER_URL="$PURPUR_API_BASE/$LATEST_VERSION/latest/download"
        # 输出到环境变量
        echo "SERVER_URL=$SERVER_URL" >> $GITHUB_ENV
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    # Step 6: 检查版本是否更新
    - name: Check if version is updated
      id: check_version
      run: |
        # 检查是否手动输入了 LATEST_VERSION
        if [ -z "${{ github.event.inputs.LATEST_VERSION }}" ]; then
          # 尝试从`last_built_version.txt`中获取版本号
          if [ -f last_built_version.txt ]; then
            LAST_BUILT_VERSION=$(cat last_built_version.txt)
          else
            LAST_BUILT_VERSION="none"
          fi
          # 检查是否需要继续构建
          if [ "$LAST_BUILT_VERSION" = "none" ]; then
            # 没有旧版本时继续构建
            echo "BUILD_NEEDED=true" >> $GITHUB_ENV
          elif [ "$LATEST_VERSION" \> "$LAST_BUILT_VERSION" ]; then
            # 如果新版本大于旧版本则继续构建
            echo "BUILD_NEEDED=true" >> $GITHUB_ENV
          else
            # 如果新版本不大于旧版本则跳过构建
            echo "BUILD_NEEDED=false" >> $GITHUB_ENV
          fi
        else
          # 手动输入版本则直接构建
          echo "BUILD_NEEDED=true" >> $GITHUB_ENV
        fi

    # Step 7: 下载 server.jar
    - name: Download server.jar
      if: env.BUILD_NEEDED == 'true'
      run: |
        curl -fSL -o server.jar "$SERVER_URL"

    # Step 8: 下载 PurpurExtras
    - name: Fetch and download latest PurpurExtras
      id: fetch_and_download
      env:
        MODRINTH_API: "https://api.modrinth.com/v2"
      run: |
        response=$(curl -sfLS "$MODRINTH_API/project/purpurextras/version?game_versions=${{ env.LATEST_VERSION }}&loaders=purpur")
        if [ -z "$response" ] || [ "$response" = "[]" ]; then
          echo "::error::No versions found for MC ${{ env.LATEST_VERSION }} with loader purpur"
          exit 1
        fi
        curl -sfL -o $(echo "$response" | jq -r '.[0].files[0].filename') "$(echo "$response" | jq -r '.[0].files[0].url')"

    # Step 9: 生成随机RCON密码
    - name: Generate random RCON password
      if: env.BUILD_NEEDED == 'true'
      id: generate_password
      run: |
        RCON_PASSWORD=$(openssl rand -base64 30 | tr -dc 'A-Za-z0-9' | head -c 30)
        echo "RCON_PASSWORD=$RCON_PASSWORD" >> $GITHUB_ENV

    # Step 10: 将随机生成的密码写入 server.properties
    - name: Update server.properties with RCON password
      if: env.BUILD_NEEDED == 'true'
      run: |
        sed -i '/^rcon.password=/c\rcon.password=${{ env.RCON_PASSWORD }}' server.properties

    # Step 11: 准备 Docker 镜像标签
    - name: Prepare Docker tags
      id: prepare_tags
      if: env.BUILD_NEEDED == 'true'
      run: |
        if [ -n "${{ github.event.inputs.LATEST_VERSION }}" ]; then
          echo "TAGS=${{ env.REGISTRY }}/${{ github.repository_owner }}/minecraft-server-purpur:${{ github.event.inputs.LATEST_VERSION }}" >> $GITHUB_ENV
        else
          echo "TAGS=${{ env.REGISTRY }}/${{ github.repository_owner }}/minecraft-server-purpur:latest,${{ env.REGISTRY }}/${{ github.repository_owner }}/minecraft-server-purpur:${{ env.LATEST_VERSION }}" >> $GITHUB_ENV
        fi
    
    # Step 12: 为多种架构构建和推送Docker镜像
    - name: Build and push Docker image
      if: env.BUILD_NEEDED == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ env.TAGS }}
        platforms: linux/amd64,linux/arm64

    # Step 13: 更新记录的最后构建版本
    - name: Update last built version
      if: env.BUILD_NEEDED == 'true' && github.event.inputs.LATEST_VERSION == ''
      run: |
        echo $LATEST_VERSION > last_built_version.txt
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add last_built_version.txt
        git commit -m "Update last built version to $LATEST_VERSION"
        git push --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
